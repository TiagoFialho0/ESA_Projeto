// <auto-generated />
using System;
using CSSC.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CSSC.Migrations
{
    [DbContext(typeof(CSSCContext))]
    [Migration("20240215195716_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CSSC.Areas.Identity.Data.CSSCUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UtDataDeNascimento")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UtMorada")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UtNIF")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d46710f8-ede5-45f8-8ac0-327290d44455",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d77267d-b7bb-4a4f-8b7d-b7c87cc0e02a",
                            TwoFactorEnabled = false,
                            UtDataDeNascimento = "01/01/1970",
                            UtMorada = "Rua teste",
                            UtNIF = 123456789
                        });
                });

            modelBuilder.Entity("CSSC.Models.Services", b =>
                {
                    b.Property<int>("IdServico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdServico"), 1L, 1);

                    b.Property<string>("EstadoDoServico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServClassificacao")
                        .HasColumnType("int");

                    b.Property<string>("ServComentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServIdOperador")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServIdUtilizador")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServMarcaVeiculo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServMatriculaVeiculo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServModeloVeiculo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ServPrazo")
                        .HasColumnType("datetime2");

                    b.Property<string>("csscOperadorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("csscUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdServico");

                    b.HasIndex("csscOperadorId");

                    b.HasIndex("csscUserId");

                    b.ToTable("ServiceModel");

                    b.HasData(
                        new
                        {
                            IdServico = 500,
                            EstadoDoServico = "Em espera",
                            ServIdUtilizador = new Guid("bb56206b-e94e-4b93-9d70-e23bcc3b8513"),
                            ServMarcaVeiculo = "Fiat",
                            ServMatriculaVeiculo = "AA-00-BB",
                            ServModeloVeiculo = "Punto",
                            ServPrazo = new DateTime(2029, 2, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            IdServico = 510,
                            EstadoDoServico = "Em reparação",
                            ServIdUtilizador = new Guid("7494dfcb-ff4d-4073-bdf9-158af960ff3c"),
                            ServMarcaVeiculo = "Seat",
                            ServMatriculaVeiculo = "BB-11-CC",
                            ServModeloVeiculo = "Ibiza",
                            ServPrazo = new DateTime(2028, 2, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            IdServico = 520,
                            EstadoDoServico = "Pronto para entrega",
                            ServIdUtilizador = new Guid("d8f2f780-51e1-4919-b065-422122262d1b"),
                            ServMarcaVeiculo = "Ford",
                            ServMatriculaVeiculo = "CC-22-DD",
                            ServModeloVeiculo = "Fiesta",
                            ServPrazo = new DateTime(2027, 2, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            IdServico = 530,
                            EstadoDoServico = "Reparação Concluida",
                            ServIdUtilizador = new Guid("93297451-5288-4dd3-b0c3-2a313772f111"),
                            ServMarcaVeiculo = "Ferrari",
                            ServMatriculaVeiculo = "DD-33-EE",
                            ServModeloVeiculo = "F40",
                            ServPrazo = new DateTime(2026, 2, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CSSC.Models.Services", b =>
                {
                    b.HasOne("CSSC.Areas.Identity.Data.CSSCUser", "csscOperador")
                        .WithMany()
                        .HasForeignKey("csscOperadorId");

                    b.HasOne("CSSC.Areas.Identity.Data.CSSCUser", "csscUser")
                        .WithMany()
                        .HasForeignKey("csscUserId");

                    b.Navigation("csscOperador");

                    b.Navigation("csscUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CSSC.Areas.Identity.Data.CSSCUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CSSC.Areas.Identity.Data.CSSCUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSSC.Areas.Identity.Data.CSSCUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CSSC.Areas.Identity.Data.CSSCUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
