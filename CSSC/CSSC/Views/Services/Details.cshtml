@model CSSC.Models.Services
@using CSSC.Controllers
@using CSSC.Extensions

@{
    ViewData["Title"] = "Detalhes do serviço";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .container {
        display: flex;
        justify-content: space-evenly;
        align-items: flex-start;
        margin: 0 auto;
        max-width: 88%;
    }

    .option {
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: center; /* Align circles in the center vertically */
        font-weight: bold;
    }

    .circle {
        border: 1px solid #ddd;
        border-radius: 50%;
        height: 80px;
        width: 80px;
        margin-bottom: 10px; /* Add space between circles */
        background-color: white;
    }

    .text {
        font-size: 14px;
    }

    body {
        background-color: #EAEAEA; /* Define a cor de fundo da página */
    }

    /* CSS para círculo laranja */
    .circle.colored {
        background-color: #E36D3F; /* Cor laranja */
        border-color: dimgrey;
    }
</style>

<h1>Detalhes</h1>

<div>
    <hr />
    <br />
    <dl class="row">
        <dt class="col-sm-4">
            @Html.DisplayNameFor(model => model.IdServico)
        </dt>
        <dd class="col-sm-6">
            @Html.DisplayFor(model => model.IdServico)
        </dd>
        <dt class="col-sm-4">
            @Html.DisplayNameFor(model => model.ServMarcaVeiculo)
        </dt>
        <dd class="col-sm-6">
            @Html.DisplayFor(model => model.ServMarcaVeiculo)
        </dd>
        <dt class="col-sm-4">
            @Html.DisplayNameFor(model => model.ServModeloVeiculo)
        </dt>
        <dd class="col-sm-6">
            @Html.DisplayFor(model => model.ServModeloVeiculo)
        </dd>
        <dt class="col-sm-4">
            @Html.DisplayNameFor(model => model.ServMatriculaVeiculo)
        </dt>
        <dd class="col-sm-6">
            @Html.DisplayFor(model => model.ServMatriculaVeiculo)
        </dd>
        <dt class="col-sm-4">
            @Html.DisplayNameFor(model => model.ServPrazo)
        </dt>
        <dd class="col-sm-6">
            @Html.DisplayFor(model => model.ServPrazo)
        </dd>
    </dl>
</div>

<div class="container">
@foreach (var estado in Enum.GetValues(typeof(EstadoDoServico)).Cast<EstadoDoServico>())
{
    <div class="option">
        <div class="circle @GetCircleClass(estado)"></div>
            <div class="text">@estado.GetEnumMemberValue()</div>
    
        @foreach (var servicesStates in ViewBag.ServicesStates)
        {
            if (servicesStates.EstadoDoServico == estado.GetEnumMemberValue())
            {
                    <div class="text" style="font-weight: normal;">
                        @servicesStates.alteracaoEstado
                    </div>            
            }
        }
    </div>
}
</div>

<br>
@if (Model.EstadoDoServico.ToString() == "Entregue" /*|| Model.EstadoDoServico.ToString() == "Cancelado"*/)
{
    <div align="right">
        <a class="btn btn-secondary" style="background-color: #E36D3F; border-color: white;" asp-action="Classificacao" asp-route-id="@Model.IdServico">Classificar Serviço</a>
    </div>
}

<br />
<br />
<div class="row">
    <div class="col">
        <strong>Contactar oficina </strong>
        <form method="post" asp-action="ContactOficina">
            @Html.AntiForgeryToken()
            <input type="hidden" name="idServico" value="@Model.IdServico" />
            <br />
            <div class="form-group">
                <input type="text" class="form-control" id="subject" name="subject" placeholder="Assunto" required="">
            </div>
            <br />
            <div class="form-group">
                <textarea class="form-control" id="description" name="description" rows="5" placeholder="Descrição" required=""></textarea>
            </div>
            <br />
            <div class="form-group d-flex justify-content-between">
                <!-- Adicionando classe d-flex e justify-content-between -->
                <a href=" /Calendar/Index" class="btn btn-secondary" style="background-color: #E36D3F; border-color: white;">Voltar</a> <!-- Adicionando classe btn-secondary -->
                <button type="submit" class="btn btn-primary" style="background-color: #E36D3F; border-color: white;">Enviar</button>
            </div>
        </form>
    </div>
</div>

@if (TempData["Success"] != null && (bool)TempData["Success"])
{
    <script>
        alert("Dados submetidos com sucesso!");
    </script>
}


@functions {
    string GetCircleClass(EstadoDoServico estado)
    {
        return estado.GetEnumMemberValue() == Model.EstadoDoServico ? "colored" : "";
    }
}

