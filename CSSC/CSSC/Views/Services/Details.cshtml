@model CSSC.Models.Services
@using CSSC.Controllers
@using CSSC.Extensions

@{
    ViewData["Title"] = "Detalhes do serviço";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .containerStates {
        display: flex;
        justify-content: space-evenly;
        align-items: flex-start;
        margin: 0 auto;
        max-width: 88%;
    }

    .option {
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: center; /* Align circles in the center vertically */
        font-weight: bold;
    }

    .circle {
        border: 1px solid #ddd;
        border-radius: 50%;
        height: 80px;
        width: 80px;
        margin-bottom: 10px; /* Add space between circles */
        background-color: white;
    }

    .text {
        font-size: 14px;
    }

    body {
        background-color: #EAEAEA; /* Define a cor de fundo da página */
    }

    /* CSS para círculo laranja */
    .circle.colored {
        background-color: #E36D3F; /* Cor laranja */
        border-color: dimgrey;
    }

    .circle.coloredPast {
        background-color: dimgrey; 
        border-color: dimgrey;
    }

    .circle.coloredCancel.Cancelado {
        background-color: #B22222; 
        border-color: dimgrey;
    }

    .form-group {
        position: relative;
    }

    
</style>
<head>
    <!-- Include Font Awesome CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
</head>
<center><h1>Detalhes</h1></center>
<hr />

<div class="row">
    <div class="col-md-6">
        
        <br />
        <dl class="row">
            <dt class="col-sm-4">
                @Html.DisplayNameFor(model => model.IdServico)
            </dt>
            <dd class="col-sm-8">
                @Html.DisplayFor(model => model.IdServico)
            </dd>
            <dt class="col-sm-4">
                @Html.DisplayNameFor(model => model.ServDataInicio)
            </dt>
            <dd class="col-sm-8">
                @Html.DisplayFor(model => model.ServDataInicio)
            </dd>
            <dt class="col-sm-4">
                @Html.DisplayNameFor(model => model.DescricaoDoServico)
            </dt>
            @if (string.IsNullOrEmpty(Model.DescricaoDoServico))
            {
                <dd class="col-sm-8">
                    <text>Sem descrição</text>
                </dd>
            }
            else
            {
                <dd class="col-sm-8">
                    @Html.DisplayFor(model => model.DescricaoDoServico)
                </dd>
            }
        </dl>
    </div>
    <div class="col-md-6">
        <br />
        <dl class="row">
            <dt class="col-sm-4">
                @Html.DisplayNameFor(model => model.ServMatriculaVeiculo)
            </dt>
            <dd class="col-sm-8">
                @Html.DisplayFor(model => model.ServMatriculaVeiculo)
            </dd>
            <dt class="col-sm-4">
                @Html.DisplayNameFor(model => model.ServMarcaVeiculo)
            </dt>
            <dd class="col-sm-8">
                @Html.DisplayFor(model => model.ServMarcaVeiculo)
            </dd>
            <dt class="col-sm-4">
                @Html.DisplayNameFor(model => model.ServModeloVeiculo)
            </dt>
            <dd class="col-sm-8">
                @Html.DisplayFor(model => model.ServModeloVeiculo)
            </dd>
        </dl>
    </div>
</div>

<br />
<div class="containerStates">
    @{
        // Variável para controlar se um círculo laranja já foi encontrado
        bool laranjaEncontrado = false;
        bool canceladoEncontrado = false;
    }

    @foreach (var estado in Enum.GetValues(typeof(EstadoDoServico)).Cast<EstadoDoServico>())
    {
        <div class="option">
            <div class="circle @(laranjaEncontrado ? "" : (estado.GetEnumMemberValue() == Model.EstadoDoServico ? "colored" : "coloredPast")) @(canceladoEncontrado? " coloredCancel":"") @estado.GetEnumMemberValue()"></div>
            <div class="text">@estado.GetEnumMemberValue()</div>

            @foreach (var servicesStates in ViewBag.ServicesStates)
            {
                if (servicesStates.EstadoDoServico == estado.GetEnumMemberValue())
                {
                    <div class="text" style="font-weight: normal;">
                        @servicesStates.alteracaoEstado
                    </div>
                }
            }
            @{
                // Se este estado é o laranja, marcar como encontrado
                if (estado.GetEnumMemberValue() == Model.EstadoDoServico)
                {
                    laranjaEncontrado = true;
                }
            }

            @{
                // Se este estado é cancelado, marcar como encontrado
                if (Model.EstadoDoServico=="Cancelado")
                {
                    canceladoEncontrado = true;
                }
            }
        </div>
    }
</div>

<br>
@if (User.IsInRole("Default"))
{
    @if (Model.EstadoDoServico.ToString() == "Entregue" && Model.ServClassificacao == null)
    {
        <div align="right">
            <a class="btn btn-secondary" style="background-color: #E36D3F; border-color: white;" asp-action="Classificacao" asp-route-id="@Model.IdServico">Classificar Serviço</a>
        </div>
    }
}

<br />
<br />
<div class="row">
    <div class="col">
        <strong>Contactar oficina </strong>
        <form method="post" asp-action="ContactOficina">
            @Html.AntiForgeryToken()
            <input type="hidden" name="idServico" value="@Model.IdServico" />
            <br />
            <div class="form-group">
                <input type="text" class="form-control" id="subject" name="subject" placeholder="Assunto" required="">
                <span class="info-icon" style="width: 20px; height: 20px;">
                    <img src="/info-button.png" style="width: 100%; height: 100%;">
                </span>
                <span class="info-text">Insira um breve assunto que pretende tratar com a oficina!</span>
            </div>
            <br />
            <div class="form-group">
                <textarea class="form-control" id="description" name="description" rows="5" placeholder="Descrição" required=""></textarea>
                <span class="info-icon" style="width: 20px; height: 20px;">
                    <img src="/info-button.png" style="width: 100%; height: 100%;">
                </span>
                <span class="info-text">Descreva com detalhe o motivo do seu contacto</span>
            </div>
            <br />
            <div class="form-group d-flex justify-content-between">
                <!-- Adicionando classe d-flex e justify-content-between -->
                @*<a href=" /Calendar/Index" class="btn btn-secondary" style="background-color: #E36D3F; border-color: white;">Voltar</a>*@
                <a href="#" onclick="goBack()" class="btn btn-secondary" style="background-color: #E36D3F; border-color: white;">Voltar</a>
                <button type="submit" class="btn btn-primary" style="background-color: #E36D3F; border-color: white;">Enviar</button>
            </div>
        </form>
    </div>
</div>


@* @functions {
    //string GetCircleClass(EstadoDoServico estado)
    string GetCircleClass(EstadoDoServico estado)
    {
        //return estado.GetEnumMemberValue() == Model.EstadoDoServico ? "colored" : "";
        return Model.EstadoDoServico == "Cancelado" ? "coloredCancel" : "";
    }
} *@

<script>
    function goBack() {
        window.location.replace(document.referrer);
    }
</script>

